import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/cache_manager.dart';
import '../services/database_helper.dart';
import '../services/steam_service.dart';
import 'matches_provider.dart';
import 'profile_provider.dart';
import 'friends_provider.dart';
import 'heroes_provider.dart';
import 'steam_api_provider.dart';

class AppStateProvider extends ChangeNotifier {
  final String steamId;
  final SteamApiProvider _apiProvider;
  
  // –°–µ—Ä–≤–∏—Å—ã
  CacheManager? _cacheManager;
  DatabaseHelper? _databaseHelper;
  SteamService? _steamService;
  
  // Provider'—ã
  MatchesProvider? _matchesProvider;
  ProfileProvider? _profileProvider;
  FriendsProvider? _friendsProvider;
  HeroesProvider? _heroesProvider;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool _isInitialized = false;
  bool _isInitializing = false;
  String? _initializationError;
  
  // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  bool _backgroundRefreshEnabled = true;
  DateTime? _lastBackgroundRefresh;
  
  // –ì–µ—Ç—Ç–µ—Ä—ã
  bool get isInitialized => _isInitialized;
  bool get isInitializing => _isInitializing;
  String? get initializationError => _initializationError;
  
  MatchesProvider? get matchesProvider => _matchesProvider;
  ProfileProvider? get profileProvider => _profileProvider;
  FriendsProvider? get friendsProvider => _friendsProvider;
  HeroesProvider? get heroesProvider => _heroesProvider;
  
  bool get backgroundRefreshEnabled => _backgroundRefreshEnabled;
  DateTime? get lastBackgroundRefresh => _lastBackgroundRefresh;
  
  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
  CacheManager? get cacheManager => _cacheManager;
  DatabaseHelper? get databaseHelper => _databaseHelper;
  SteamService? get steamService => _steamService;
  
  AppStateProvider({
    required this.steamId,
    required SteamApiProvider apiProvider,
  }) : _apiProvider = apiProvider;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  Future<void> initialize() async {
    if (_isInitializing || _isInitialized) return;
    
    _isInitializing = true;
    _initializationError = null;
    notifyListeners();
    
    try {
      print('üöÄ Initializing AppStateProvider for user $steamId');
      
      // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      await _initializeServices();
      
      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      await _initializeProviders();
      
      // 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
      _startBackgroundProcesses();
      
      _isInitialized = true;
      print('‚úÖ AppStateProvider initialized successfully');
      
    } catch (e) {
      print('‚ùå Error initializing AppStateProvider: $e');
      _initializationError = e.toString();
    } finally {
      _isInitializing = false;
      notifyListeners();
    }
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  Future<void> _initializeServices() async {
    final prefs = await SharedPreferences.getInstance();
    
    _cacheManager = CacheManager(prefs);
    _databaseHelper = DatabaseHelper();
    
    final apiKey = _apiProvider.apiKey;
    if (apiKey == null || apiKey.isEmpty) {
      throw Exception('API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    _steamService = SteamService(apiKey, prefs);
    
    print('‚úÖ Services initialized');
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  Future<void> _initializeProviders() async {
    if (_cacheManager == null || _databaseHelper == null || _steamService == null) {
      throw Exception('Services not initialized');
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    _matchesProvider = MatchesProvider(
      steamId: steamId,
      cacheManager: _cacheManager!,
      databaseHelper: _databaseHelper!,
      steamService: _steamService!,
    );
    
    _profileProvider = ProfileProvider(
      steamId: steamId,
      cacheManager: _cacheManager!,
      steamService: _steamService!,
    );
    
    _friendsProvider = FriendsProvider(
      steamId: steamId,
      cacheManager: _cacheManager!,
      steamService: _steamService!,
    );
    
    _heroesProvider = HeroesProvider(
      steamId: steamId,
      cacheManager: _cacheManager!,
      steamService: _steamService!,
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Future.wait([
      _profileProvider!.initialize(),
      _matchesProvider!.initialize(),
      _heroesProvider!.initialize(),
      _friendsProvider!.initialize(),
    ]);
    
    print('‚úÖ Providers initialized');
  }
  
  // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  void _startBackgroundProcesses() {
    if (!_backgroundRefreshEnabled) return;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    Future.delayed(const Duration(minutes: 5), () {
      if (_isInitialized && _backgroundRefreshEnabled) {
        _performBackgroundRefresh();
        _startBackgroundProcesses(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
      }
    });
  }
  
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Future<void> _performBackgroundRefresh() async {
    try {
      print('üîÑ Starting background refresh...');
      
      final futures = <Future<void>>[];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (_profileProvider != null && _profileProvider!.needsRefresh()) {
        futures.add(_profileProvider!.backgroundRefresh());
      }
      
      if (_heroesProvider != null) {
        futures.add(_heroesProvider!.backgroundRefresh());
      }
      
      if (_friendsProvider != null) {
        futures.add(_friendsProvider!.backgroundRefresh());
      }
      
      // –ú–∞—Ç—á–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–µ–∂–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ)
      // if (_matchesProvider != null) {
      //   futures.add(_matchesProvider!.backgroundRefresh());
      // }
      
      await Future.wait(futures);
      
      _lastBackgroundRefresh = DateTime.now();
      
      print('‚úÖ Background refresh completed');
      notifyListeners();
      
    } catch (e) {
      print('‚ùå Background refresh failed: $e');
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> forceRefreshAll() async {
    if (!_isInitialized) return;
    
    try {
      print('üîÑ Force refreshing all data...');
      
      await Future.wait([
        if (_profileProvider != null) _profileProvider!.forceRefresh(),
        if (_matchesProvider != null) _matchesProvider!.forceRefresh(),
        if (_heroesProvider != null) _heroesProvider!.forceRefresh(),
        if (_friendsProvider != null) _friendsProvider!.forceRefresh(),
      ]);
      
      print('‚úÖ Force refresh completed');
      
    } catch (e) {
      print('‚ùå Force refresh failed: $e');
    }
  }
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  void setBackgroundRefreshEnabled(bool enabled) {
    _backgroundRefreshEnabled = enabled;
    
    if (enabled && _isInitialized) {
      _startBackgroundProcesses();
    }
    
    notifyListeners();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  Future<Map<String, dynamic>> getCacheStats() async {
    if (_cacheManager == null) return {};
    
    return await _cacheManager!.getCacheStats();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<Map<String, dynamic>> getDatabaseStats() async {
    if (_databaseHelper == null) return {};
    
    return await _databaseHelper!.getDatabaseStats(steamId);
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
  Future<void> clearAllCache() async {
    if (_cacheManager == null) return;
    
    await _cacheManager!.clearAllCache();
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    if (_isInitialized) {
      await _initializeProviders();
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> clearDatabase() async {
    if (_databaseHelper == null) return;
    
    await _databaseHelper!.cleanOldMatches(steamId, olderThan: const Duration(days: 0));
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –º–∞—Ç—á–µ–π
    if (_matchesProvider != null) {
      await _matchesProvider!.forceRefresh();
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  bool get isAnyLoading {
    return (_profileProvider?.isLoading ?? false) ||
           (_matchesProvider?.isLoading ?? false) ||
           (_heroesProvider?.isLoading ?? false) ||
           (_friendsProvider?.isLoading ?? false);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–æ–∫
  List<String> get allErrors {
    final errors = <String>[];
    
    if (_profileProvider?.errorMessage != null) {
      errors.add('–ü—Ä–æ—Ñ–∏–ª—å: ${_profileProvider!.errorMessage}');
    }
    if (_matchesProvider?.errorMessage != null) {
      errors.add('–ú–∞—Ç—á–∏: ${_matchesProvider!.errorMessage}');
    }
    if (_heroesProvider?.errorMessage != null) {
      errors.add('–ì–µ—Ä–æ–∏: ${_heroesProvider!.errorMessage}');
    }
    if (_friendsProvider?.errorMessage != null) {
      errors.add('–î—Ä—É–∑—å—è: ${_friendsProvider!.errorMessage}');
    }
    
    return errors;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  String getLastRefreshFormatted() {
    if (_lastBackgroundRefresh == null) return '–ù–∏–∫–æ–≥–¥–∞';
    
    final now = DateTime.now();
    final difference = now.difference(_lastBackgroundRefresh!);
    
    if (difference.inMinutes < 1) {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥';
    } else if (difference.inHours < 24) {
      return '${difference.inHours} —á –Ω–∞–∑–∞–¥';
    } else {
      return '${difference.inDays} –¥–Ω –Ω–∞–∑–∞–¥';
    }
  }
  
  @override
  void dispose() {
    _databaseHelper?.close();
    super.dispose();
  }
} 