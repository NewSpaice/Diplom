import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/cache_manager.dart';
import '../services/steam_service.dart';

class ProfileProvider extends ChangeNotifier {
  final String steamId;
  final CacheManager _cacheManager;
  final SteamService _steamService;
  
  Map<String, dynamic>? _profileData;
  bool _isLoading = false;
  bool _isRefreshing = false;
  String? _errorMessage;
  DateTime? _lastUpdated;
  
  // –ì–µ—Ç—Ç–µ—Ä—ã
  Map<String, dynamic>? get profileData => _profileData;
  bool get isLoading => _isLoading;
  bool get isRefreshing => _isRefreshing;
  String? get errorMessage => _errorMessage;
  DateTime? get lastUpdated => _lastUpdated;
  bool get hasData => _profileData != null;
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
  Map<String, dynamic>? get statsData => _profileData?['stats'];
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
  String getRankImageUrl(int rankTier) {
    if (rankTier == 0) return 'ranks/rank_icon_0.png'; // –ë–µ–∑ —Ä–∞–Ω–≥–∞
    if (rankTier >= 80) return 'ranks/rank_icon_${rankTier}.webp'; // Immortal (webp)
    if (rankTier == 11) return 'ranks/rank-icon-11.png'; // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
    if (rankTier == 12) return 'ranks/rank_icon_12.png'; // PNG —Ñ–æ—Ä–º–∞—Ç
    return 'ranks/rank_icon_${rankTier}.webp'; // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤ webp
  }
  
  ProfileProvider({
    required this.steamId,
    required CacheManager cacheManager,
    required SteamService steamService,
  }) : _cacheManager = cacheManager,
       _steamService = steamService;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
  Future<void> initialize() async {
    if (_isLoading) return;
    
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞
      await _loadFromCache();
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      final needsRefresh = await _cacheManager.needsRefresh('profile_$steamId');
      
      if (needsRefresh || _profileData == null) {
        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
        await _loadFromAPI(isBackground: _profileData != null);
      }
      
    } catch (e) {
      print('‚ùå Error initializing profile: $e');
      _errorMessage = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞
  Future<void> _loadFromCache() async {
    try {
      final cachedData = await _cacheManager.getData('profile_$steamId');
      
      if (cachedData != null) {
        _profileData = cachedData;
        _lastUpdated = DateTime.fromMillisecondsSinceEpoch(
          cachedData['cached_at'] ?? DateTime.now().millisecondsSinceEpoch,
        );
        
        print('üì± Loaded profile from cache');
        notifyListeners();
      }
    } catch (e) {
      print('‚ùå Error loading from cache: $e');
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ API
  Future<void> _loadFromAPI({bool isBackground = false}) async {
    try {
      if (isBackground) {
        _isRefreshing = true;
      } else {
        _isLoading = true;
      }
      notifyListeners();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
      final basicProfile = await _steamService.getPlayerProfile(steamId);
      
      if (basicProfile != null) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
        final profileData = Map<String, dynamic>.from(basicProfile);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑–∞–ª—Å—è
        Map<String, dynamic>? statsData;
        try {
          statsData = await _steamService.getPlayerStats(steamId);
          print('üìä Player stats loaded: $statsData');
        } catch (e) {
          print('‚ö†Ô∏è Could not load player stats: $e');
          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è
        if (statsData != null) {
          profileData['stats'] = statsData;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º timestamp
        profileData['cached_at'] = DateTime.now().millisecondsSinceEpoch;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await _cacheManager.saveData('profile_$steamId', profileData);
        
        _profileData = profileData;
        _lastUpdated = DateTime.now();
        _errorMessage = null;
        
        print('üåê Loaded profile from API');
      } else {
        throw Exception('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
    } catch (e) {
      print('‚ùå Error loading from API: $e');
      if (!isBackground) {
        _errorMessage = e.toString();
      }
    } finally {
      _isLoading = false;
      _isRefreshing = false;
      notifyListeners();
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  Future<void> forceRefresh() async {
    await _cacheManager.clearCache('profile_$steamId');
    _profileData = null;
    _lastUpdated = null;
    await initialize();
  }
  
  // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  Future<void> backgroundRefresh() async {
    if (_isLoading || _isRefreshing) return;
    
    try {
      await _loadFromAPI(isBackground: true);
    } catch (e) {
      print('‚ùå Background refresh failed: $e');
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  String getLastUpdatedFormatted() {
    if (_lastUpdated == null) return '–ù–∏–∫–æ–≥–¥–∞';
    
    final now = DateTime.now();
    final difference = now.difference(_lastUpdated!);
    
    if (difference.inMinutes < 1) {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥';
    } else if (difference.inHours < 24) {
      return '${difference.inHours} —á –Ω–∞–∑–∞–¥';
    } else {
      return '${difference.inDays} –¥–Ω –Ω–∞–∑–∞–¥';
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–¥—ã –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  bool needsRefresh() {
    if (_lastUpdated == null) return true;
    
    final now = DateTime.now();
    final difference = now.difference(_lastUpdated!);
    
    return difference.inMinutes > 30; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  }
} 