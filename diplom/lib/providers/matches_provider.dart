import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../services/cache_manager.dart';
import '../services/steam_service.dart';
import '../services/database_helper.dart';

enum LoadAllMatchesState {
  notStarted,
  loading,
  completed,
  error,
}

class MatchesProvider extends ChangeNotifier {
  final String steamId;
  final CacheManager _cacheManager;
  final SteamService _steamService;
  final DatabaseHelper _databaseHelper;
  
  List<Map<String, dynamic>> _matches = [];
  List<String> _heroes = ['–í—Å–µ –≥–µ—Ä–æ–∏'];
  bool _isLoading = false;
  bool _isRefreshing = false;
  String? _errorMessage;
  DateTime? _lastUpdated;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
  LoadAllMatchesState _loadAllState = LoadAllMatchesState.notStarted;
  int _totalMatchesToLoad = 0;
  int _loadedMatches = 0;
  String? _loadAllError;
  
  // –ì–µ—Ç—Ç–µ—Ä—ã
  List<Map<String, dynamic>> get matches => _matches;
  List<String> get heroes => _heroes;
  bool get isLoading => _isLoading;
  bool get isRefreshing => _isRefreshing;
  String? get errorMessage => _errorMessage;
  DateTime? get lastUpdated => _lastUpdated;
  bool get hasData => _matches.isNotEmpty;
  
  LoadAllMatchesState get loadAllState => _loadAllState;
  int get totalMatchesToLoad => _totalMatchesToLoad;
  int get loadedMatches => _loadedMatches;
  String? get loadAllError => _loadAllError;
  
  MatchesProvider({
    required this.steamId,
    required CacheManager cacheManager,
    required SteamService steamService,
    required DatabaseHelper databaseHelper,
  }) : _cacheManager = cacheManager,
       _steamService = steamService,
       _databaseHelper = databaseHelper;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  Future<void> initialize() async {
    if (_isLoading) return;
    
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();
    
    try {
      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞
      await _loadFromCache();
      
      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–µ—Ä–æ–µ–≤
      await _loadHeroes();
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      final needsRefresh = await _cacheManager.needsRefresh('matches_$steamId');
      
      if (needsRefresh || _matches.isEmpty) {
        // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
        await _loadFromAPI(isBackground: _matches.isNotEmpty);
      }
      
    } catch (e) {
      print('‚ùå Error initializing matches: $e');
      _errorMessage = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞
  Future<void> _loadFromCache() async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à
      final cachedData = await _cacheManager.getData('matches_$steamId');
      if (cachedData != null && cachedData['matches'] != null) {
        final cachedMatches = List<Map<String, dynamic>>.from(cachedData['matches']);
        if (cachedMatches.isNotEmpty) {
          _matches = cachedMatches;
          _lastUpdated = DateTime.fromMillisecondsSinceEpoch(
            cachedData['timestamp'] ?? DateTime.now().millisecondsSinceEpoch,
          );
          print('üì± Loaded ${cachedMatches.length} matches from cache');
          notifyListeners();
          return;
        }
      }
      
      // –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      final dbMatches = await _databaseHelper.getMatches(steamId, limit: 50);
      if (dbMatches.isNotEmpty) {
        _matches = dbMatches;
        print('üíæ Loaded ${dbMatches.length} matches from database');
        notifyListeners();
      }
    } catch (e) {
      print('‚ùå Error loading from cache/database: $e');
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ—Ä–æ–µ–≤
  Future<void> _loadHeroes() async {
    try {
      final heroesData = await _steamService.getHeroes();
      if (heroesData != null && heroesData['result'] != null && heroesData['result']['heroes'] != null) {
        final heroes = heroesData['result']['heroes'] as List;
        _heroes = ['–í—Å–µ –≥–µ—Ä–æ–∏', ...heroes.map((h) => h['localized_name'] as String).toList()];
        print('üéÆ Loaded ${heroes.length} heroes');
      }
    } catch (e) {
      print('‚ùå Error loading heroes: $e');
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ API
  Future<void> _loadFromAPI({bool isBackground = false}) async {
    try {
      if (isBackground) {
        _isRefreshing = true;
      } else {
        _isLoading = true;
      }
      notifyListeners();
      
      final matchesData = await _steamService.getMatchHistory(steamId);
      final heroesData = await _steamService.getHeroes();
      
      if (matchesData != null && heroesData != null) {
        final matches = List<Map<String, dynamic>>.from(matchesData['result']['matches'] ?? []);
        final heroes = heroesData['result']['heroes'] as List;
        
        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –ø–æ ID
        final heroesMap = Map.fromEntries(
          heroes.map((h) => MapEntry(h['id'], h['localized_name']))
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –≥–µ—Ä–æ–µ–≤ –∫ –º–∞—Ç—á–∞–º
        for (var match in matches) {
          final player = match['players'].firstWhere(
            (p) => p['account_id'].toString() == _convertToAccountId(steamId),
            orElse: () => {'hero_id': 0},
          );
          match['hero_name'] = heroesMap[player['hero_id']] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–µ—Ä–æ–π';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ–Ω–µ
        _loadMatchDurations(matches);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await _cacheManager.saveData('matches_$steamId', {
          'matches': matches,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        });
        await _databaseHelper.saveMatches(steamId, matches);
        
        _matches = matches;
        _lastUpdated = DateTime.now();
        _errorMessage = null;
        
        print('üåê Loaded ${matches.length} matches from API');
      }
      
    } catch (e) {
      print('‚ùå Error loading from API: $e');
      if (!isBackground) {
        _errorMessage = e.toString();
      }
    } finally {
      _isLoading = false;
      _isRefreshing = false;
      notifyListeners();
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–µ–π
  Future<void> _loadMatchDurations(List<Map<String, dynamic>> matches) async {
    final tasks = <Future<void>>[];
    
    for (int i = 0; i < matches.length; i++) {
      final match = matches[i];
      tasks.add(_loadSingleMatchDuration(match, i * 50));
    }
    
    try {
      await Future.wait(tasks);
      print('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è ${matches.length} –º–∞—Ç—á–µ–π');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–µ–π: $e');
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞
  Future<void> _loadSingleMatchDuration(Map<String, dynamic> match, int delayMs) async {
    try {
      await Future.delayed(Duration(milliseconds: delayMs));
      
      final matchId = match['match_id'];
      final response = await http.get(
        Uri.parse('https://api.opendota.com/api/matches/$matchId'),
      ).timeout(const Duration(seconds: 10));
      
      if (response.statusCode == 200) {
        final matchDetails = json.decode(response.body);
        if (matchDetails['duration'] != null) {
          match['duration'] = matchDetails['duration'];
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç—á
          await _databaseHelper.saveMatches(steamId, [match]);
          await _cacheManager.saveData('matches_$steamId', {
            'matches': _matches,
            'timestamp': DateTime.now().millisecondsSinceEpoch,
          });
          
          notifyListeners();
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞—Ç—á–∞ ${match['match_id']}: $e');
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
  Future<void> loadAllMatches() async {
    if (_loadAllState == LoadAllMatchesState.loading) return;
    
    _loadAllState = LoadAllMatchesState.loading;
    _loadedMatches = 0;
    _totalMatchesToLoad = 0;
    _loadAllError = null;
    notifyListeners();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
      final firstBatch = await _steamService.getMatchHistory(steamId);
      final totalMatches = firstBatch['result']['total_results'] ?? 0;
      
      _totalMatchesToLoad = totalMatches;
      notifyListeners();
      
      print('üìä Total matches to load: $totalMatches');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –ø–æ –±–∞—Ç—á–∞–º
      const int batchSize = 100;
      int startMatchId = 0;
      List<Map<String, dynamic>> allMatches = [];
      int batchNumber = 0;
      
      while (true) {
        batchNumber++;
        print('üì• Loading batch $batchNumber starting from match ID: $startMatchId');
        
        final batchData = await _steamService.getMatchHistoryBatch(
          steamId,
          startAt: startMatchId,
          limit: batchSize,
        );
        
        final matches = List<Map<String, dynamic>>.from(
          batchData['result']['matches'] ?? []
        );
        
        if (matches.isEmpty) {
          print('‚úÖ No more matches found, stopping');
          break;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ—Ä–æ–µ–≤ –∫ –º–∞—Ç—á–∞–º
        final heroesData = await _steamService.getHeroes();
        if (heroesData != null && heroesData['result'] != null) {
          final heroes = heroesData['result']['heroes'] as List;
          final heroesMap = Map.fromEntries(
            heroes.map((h) => MapEntry(h['id'], h['localized_name']))
          );
          
          for (var match in matches) {
            final player = match['players'].firstWhere(
              (p) => p['account_id'].toString() == _convertToAccountId(steamId),
              orElse: () => {'hero_id': 0},
            );
            match['hero_name'] = heroesMap[player['hero_id']] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–µ—Ä–æ–π';
          }
        }
        
        allMatches.addAll(matches);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        _loadedMatches = allMatches.length;
        _matches = allMatches; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        notifyListeners();
        
        print('üìà Progress: ${_loadedMatches}/$_totalMatchesToLoad matches loaded (batch $batchNumber)');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await _databaseHelper.saveMatches(steamId, matches);
        
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
        startMatchId = matches.last['match_id'] - 1;
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await Future.delayed(const Duration(milliseconds: 1000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫—É
        if (_loadAllState != LoadAllMatchesState.loading) {
          break;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (batchNumber >= 50) {
          print('‚ö†Ô∏è Reached maximum batch limit (50), stopping');
          break;
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–æ –≤—Å–µ–º–∏ –º–∞—Ç—á–∞–º–∏
      await _cacheManager.saveData('matches_$steamId', {
        'matches': allMatches,
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      });
      
      _matches = allMatches;
      _loadAllState = LoadAllMatchesState.completed;
      _lastUpdated = DateTime.now();
      
      print('üéâ Successfully loaded all ${allMatches.length} matches!');
      notifyListeners();
      
    } catch (e) {
      print('‚ùå Error loading all matches: $e');
      _loadAllState = LoadAllMatchesState.error;
      _loadAllError = e.toString();
      notifyListeners();
    }
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Steam ID –≤ account ID
  String _convertToAccountId(String steamId) {
    try {
      final steamIdNum = BigInt.parse(steamId);
      final accountId = (steamIdNum - BigInt.from(76561197960265728)).toString();
      return accountId;
    } catch (e) {
      print('Error converting Steam ID: $e');
      return steamId;
    }
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  Future<void> forceRefresh() async {
    await _cacheManager.clearCache('matches_$steamId');
    _matches.clear();
    _lastUpdated = null;
    await initialize();
  }
  
  // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  Future<void> backgroundRefresh() async {
    if (_isLoading || _isRefreshing) return;
    
    try {
      await _loadFromAPI(isBackground: true);
    } catch (e) {
      print('‚ùå Background refresh failed: $e');
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  String getLastUpdatedFormatted() {
    if (_lastUpdated == null) return '–ù–∏–∫–æ–≥–¥–∞';
    
    final now = DateTime.now();
    final difference = now.difference(_lastUpdated!);
    
    if (difference.inMinutes < 1) {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥';
    } else if (difference.inHours < 24) {
      return '${difference.inHours} —á –Ω–∞–∑–∞–¥';
    } else {
      return '${difference.inDays} –¥–Ω –Ω–∞–∑–∞–¥';
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
  double getLoadAllProgress() {
    return _totalMatchesToLoad > 0 ? _loadedMatches / _totalMatchesToLoad : 0.0;
  }
} 