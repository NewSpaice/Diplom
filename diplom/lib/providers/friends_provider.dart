import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/cache_manager.dart';
import '../services/steam_service.dart';

enum SortType {
  games,
  winRate,
}

enum SortDirection {
  ascending,
  descending,
}

class FriendsProvider extends ChangeNotifier {
  final String steamId;
  final CacheManager _cacheManager;
  final SteamService _steamService;
  
  List<Map<String, dynamic>> _friends = [];
  List<Map<String, dynamic>> _friendsWithGames = [];
  bool _isLoading = false;
  bool _isRefreshing = false;
  String? _errorMessage;
  DateTime? _lastUpdated;
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  SortType? _currentSortType = SortType.games;
  SortDirection _currentSortDirection = SortDirection.descending;
  
  // –ì–µ—Ç—Ç–µ—Ä—ã
  List<Map<String, dynamic>> get friends => _friendsWithGames;
  bool get isLoading => _isLoading;
  bool get isRefreshing => _isRefreshing;
  String? get errorMessage => _errorMessage;
  DateTime? get lastUpdated => _lastUpdated;
  bool get hasData => _friendsWithGames.isNotEmpty;
  SortType? get currentSortType => _currentSortType;
  SortDirection get currentSortDirection => _currentSortDirection;
  
  FriendsProvider({
    required this.steamId,
    required CacheManager cacheManager,
    required SteamService steamService,
  }) : _cacheManager = cacheManager,
       _steamService = steamService;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
  Future<void> initialize() async {
    if (_isLoading) return;
    
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞
      await _loadFromCache();
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      final needsRefresh = await _cacheManager.needsRefresh('friends_$steamId');
      
      if (needsRefresh || _friendsWithGames.isEmpty) {
        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
        await _loadFromAPI(isBackground: _friendsWithGames.isNotEmpty);
      }
      
      // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
      _applySorting();
      
    } catch (e) {
      print('‚ùå Error initializing friends: $e');
      _errorMessage = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞
  Future<void> _loadFromCache() async {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞ —Å steamId
      final cachedData = await _cacheManager.getData('friends_$steamId');
      
      if (cachedData != null && cachedData['friends'] != null) {
        final friendsList = List<Map<String, dynamic>>.from(cachedData['friends']);
        if (friendsList.isNotEmpty) {
          _friendsWithGames = friendsList;
          _lastUpdated = DateTime.fromMillisecondsSinceEpoch(
            cachedData['timestamp'] ?? DateTime.now().millisecondsSinceEpoch,
          );
          
          print('üì± Loaded ${friendsList.length} friends from cache');
          notifyListeners();
        }
      }
    } catch (e) {
      print('‚ùå Error loading from cache: $e');
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ API
  Future<void> _loadFromAPI({bool isBackground = false}) async {
    try {
      if (isBackground) {
        _isRefreshing = true;
      } else {
        _isLoading = true;
      }
      notifyListeners();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
      final friendsData = await _steamService.getFriendsList(steamId);
      
      if (friendsData != null && friendsData['friendslist'] != null) {
        _friends = List<Map<String, dynamic>>.from(friendsData['friendslist']['friends'] ?? []);
        print('üìà Loading stats for ${_friends.length} friends...');
        
        _friendsWithGames.clear();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
        for (int i = 0; i < _friends.length; i++) {
          final friend = _friends[i];
          final friendSteamId = friend['steamid'];
          
          if (friendSteamId != null) {
            try {
              final stats = await _steamService.getFriendStats(steamId, friendSteamId);
              
              // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä—ã –≤ Dota 2
              if ((stats['total_games'] as int) > 0) {
                final friendWithStats = Map<String, dynamic>.from(friend);
                friendWithStats.addAll(stats);
                friendWithStats['cached_at'] = DateTime.now().millisecondsSinceEpoch;
                _friendsWithGames.add(friendWithStats);
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
              if (i % 3 == 0) {
                notifyListeners();
              }
              
              // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
              if (i < _friends.length - 1) {
                await Future.delayed(const Duration(milliseconds: 3000));
              }
              
            } catch (e) {
              print('‚ùå Error loading stats for friend $friendSteamId: $e');
              // –ï—Å–ª–∏ —ç—Ç–æ rate limit, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
              if (e.toString().contains('429')) {
                print('üïê Rate limit detected, waiting 15 seconds...');
                await Future.delayed(const Duration(seconds: 15));
              }
            }
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await _cacheManager.saveData('friends_$steamId', {
          'friends': _friendsWithGames,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        });
        
        _lastUpdated = DateTime.now();
        _errorMessage = null;
        
        print('üåê Loaded ${_friendsWithGames.length} friends with games from API');
      } else {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π');
      }
      
    } catch (e) {
      print('‚ùå Error loading from API: $e');
      if (!isBackground) {
        _errorMessage = e.toString();
      }
    } finally {
      _isLoading = false;
      _isRefreshing = false;
      notifyListeners();
    }
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  void toggleSort(SortType type) {
    if (_currentSortType == type) {
      // –ï—Å–ª–∏ —É–∂–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç—Ç–æ–º—É —Ç–∏–ø—É, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      _currentSortDirection = _currentSortDirection == SortDirection.descending 
          ? SortDirection.ascending 
          : SortDirection.descending;
    } else {
      // –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      _currentSortType = type;
      _currentSortDirection = SortDirection.descending;
    }
    
    _applySorting();
    notifyListeners();
  }
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  void _applySorting() {
    if (_currentSortType == null) return;
    
    _friendsWithGames.sort((a, b) => _compareFriends(a, b, _currentSortType!));
  }
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  int _compareFriends(Map<String, dynamic> a, Map<String, dynamic> b, SortType type) {
    int comparison = 0;
    
    if (type == SortType.games) {
      comparison = (a['total_games'] as int).compareTo(b['total_games'] as int);
    } else if (type == SortType.winRate) {
      final winRateA = a['win_rate'] as double;
      final winRateB = b['win_rate'] as double;
      comparison = winRateA.compareTo(winRateB);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if (_currentSortDirection == SortDirection.descending) {
      return -comparison;
    }
    return comparison;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  String getSortDescription() {
    if (_currentSortType == null) return '';
    
    final direction = _currentSortDirection == SortDirection.descending ? '–ø–æ —É–±—ã–≤–∞–Ω–∏—é' : '–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é';
    final type = _currentSortType == SortType.games ? '–ø–æ –∏–≥—Ä–∞–º' : '–ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É';
    
    return '$type $direction';
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  Future<void> forceRefresh() async {
    await _cacheManager.clearCache('friends_$steamId');
    _friendsWithGames.clear();
    _lastUpdated = null;
    await initialize();
  }
  
  // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  Future<void> backgroundRefresh() async {
    if (_isLoading || _isRefreshing) return;
    
    try {
      await _loadFromAPI(isBackground: true);
      _applySorting();
    } catch (e) {
      print('‚ùå Background refresh failed: $e');
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  String getLastUpdatedFormatted() {
    if (_lastUpdated == null) return '–ù–∏–∫–æ–≥–¥–∞';
    
    final now = DateTime.now();
    final difference = now.difference(_lastUpdated!);
    
    if (difference.inMinutes < 1) {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥';
    } else if (difference.inHours < 24) {
      return '${difference.inHours} —á –Ω–∞–∑–∞–¥';
    } else {
      return '${difference.inDays} –¥–Ω –Ω–∞–∑–∞–¥';
    }
  }
} 